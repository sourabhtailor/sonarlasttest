name: PHP CI/CD with SonarCloud and Parallel Deployment

on:
  push:
    branches: [ dev ]  # Change to your branch name

jobs:
  # sonarcloud:
  #   name: SonarCloud Scan
  #   runs-on: ubuntu-latest
  #   outputs:
  #     version_tag: ${{ steps.set-version.outputs.version_tag }}

    # steps:
      # - name: Checkout Code
      #   uses: actions/checkout@v4
      #   with:
      #     fetch-depth: 0

      # - name: Set Version Tag
      #   id: set-version
      #   run: echo "version_tag=v1.0.${{ github.run_number }}" >> "$GITHUB_OUTPUT"

      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@v2
      #   with:
      #     args: >
      #       -Dsonar.projectKey=sourabhtailor_sonarproject-with-aws
      #       -Dsonar.organization=sourabhtailor
      #       -Dsonar.sources=.
      #       -Dsonar.exclusions=vendor/**,tests/**,.github/**
      #       -Dsonar.projectVersion=v1.0.${{ github.run_number }}
      #       -Dsonar.qualitygate.wait=true
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    name: Deploy to aws using ssm
    runs-on: ubuntu-latest
    # needs: sonarcloud

    steps:
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Run script on EC2 using SSM (with result check)
      run: |
        set -e

        # Get instance IDs by tag
        instance_ids=$(aws ec2 describe-instances \
          --filters "Name=tag:dev,Values=deployment" \
          --query "Reservations[].Instances[].InstanceId" \
          --region ap-south-1 --output text)

        # Send the SSM command
        command_id=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets '[{"Key":"tag:dev","Values":["deployment"]}]' \
          --parameters 'commands=["sudo -u root bash /var/www/deploy.sh"]' \
          --region ap-south-1 \
          --query "Command.CommandId" \
          --output text)

        echo "üì® Command sent. ID: $command_id"

        for id in $instance_ids; do
          echo "üîç Checking command invocation for instance $id..."

          # Wait until the command invocation shows up
          for attempt in {1..10}; do
            invocation=$(aws ssm list-command-invocations \
              --command-id "$command_id" \
              --instance-id "$id" \
              --region ap-south-1 \
              --query "CommandInvocations" \
              --output text)

            if [[ -n "$invocation" && "$invocation" != "None" ]]; then
              echo "‚úÖ Invocation registered for instance $id"
              break
            else
              echo "‚è≥ Waiting for invocation to register (attempt $attempt)..."
              sleep 3
            fi
          done

          echo "‚è±Ô∏è Waiting for command to execute on instance $id..."
          aws ssm wait command-executed \
            --command-id "$command_id" \
            --instance-id "$id" \
            --region ap-south-1

          # Check result
          status=$(aws ssm list-command-invocations \
            --command-id "$command_id" \
            --instance-id "$id" \
            --query "CommandInvocations[0].Status" \
            --region ap-south-1 \
            --output text)

          echo "üì¶ Instance $id: Command status is $status"

          if [[ "$status" != "Success" ]]; then
            echo "‚ùå Command failed on $id"
            exit 1
          fi
        done

        echo "‚úÖ Command succeeded on all instances."


