name: PHP CI/CD with SonarCloud and Parallel Deployment

on:
  push:
    branches: [ dev ]  # Change to your branch name

jobs:
  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.set-version.outputs.version_tag }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Version Tag
        id: set-version
        run: echo "version_tag=v1.0.${{ github.run_number }}" >> "$GITHUB_OUTPUT"

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=sourabhtailor_multiserver
            -Dsonar.organization=sourabhtailor
            -Dsonar.sources=.
            -Dsonar.exclusions=vendor/**,tests/**,.github/**
            -Dsonar.projectVersion=v1.0.${{ github.run_number }}
            -Dsonar.qualitygate.wait=true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    name: Deploy to aws using ssm
    needs: sonarcloud
    runs-on: ubuntu-latest

    steps:
    
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ap-south-1
    
        - name: Send command to EC2
          id: send_ssm
          run: |
            INSTANCE_ID="i-07046ffd6b5f54c52"
            COMMAND="sudo cat /var/www/html/index.html"
    
            echo "Sending SSM command..."
            COMMAND_ID=$(aws ssm send-command \
              --instance-ids "$INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --comment "GitHub Actions SSM test" \
              --parameters commands=["$COMMAND"] \
              --query "Command.CommandId" \
              --output text)
    
            echo "SSM command sent. ID: $COMMAND_ID"
            echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_ENV
            echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
    
        - name: Wait for command to finish and get output
          run: |
            echo "Waiting for command to finish..."
            STATUS="InProgress"
            for i in {1..10}; do
              STATUS=$(aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "$INSTANCE_ID" \
                --query "Status" \
                --output text)
    
              echo "Attempt $i: Status = $STATUS"
              if [[ "$STATUS" == "Success" || "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
                break
              fi
              sleep 3
            done
    
            echo "Final status: $STATUS"
    
            if [ "$STATUS" != "Success" ]; then
              echo "SSM command failed or did not complete."
              exit 1
            fi
    
            echo "Fetching output:"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --query "StandardOutputContent" \
              --output text
    
